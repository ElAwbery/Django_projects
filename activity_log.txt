
Notes:
 - All entries are always in reverse order. Latest activity is always at top. 


Feb 20th:



David helped: turned out that the html page commenting out was not working. 

Didn't work. 
Used: python manage.py collectstatic
Template not loading in the browser was a Django caching error. Cleared browser histories, but it turned out that my commented out code was still loading from an old cached version. 

After this I was able to start debugging my code again in the local environment.

David helped fix this error: 
Django.db.utils.OperationalError message: “Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)”
Django throws this error message when it can’t get the db connection info from your app (host, port, usermame, password, etc). It has a null port bc it didn’t load a settings file or something like that. The port variable doesn’t get initialized.
SOLUTION:
Whatever command you are using in the Django server, e.g. migrate, give it the settings file if it’s not called ‘settings.py’ 
e.g:
$ python manage.py migrate appname —settings=app.basesettings

Switched to config.basesettings, added local database there and used hardoded SECRET_KEY
Got a weird connection error for MySQL, re-started the local MAMP servers
Used FTP to copy latest versions of hubapp, config and charlieawbery_root directories to VSC on my Mac. Kept the old Mac versions in a folder called FOO inside charlieawbery project. 
Runserver command worked and established the connection
Changed database settings to server database in debugsettings
!! It is not my code that makes the server connection to localhost, it is the runserver command !!
Server connection aborted with error message: "Can't connect to MySQL server on '127.0.0.1' (111)"
Added database settings for local database to debugsettings
$ python3 manage.py runserver --settings=config.debugsettings achieves connection to localhost, but page view does not work
I am using a new config.debugsettings.py file I made for this purpose.
I want to use the code that is stored in my cPanel files but debug it in a local environment. 
Aim1: to set up debug environment so that I can see python/Django error messages in the shell

Feb 19th 2020:

Hardcoded the path from charlieawbery through to the html file. 
Changed path to omit 'hubapp/' because the file is in the same directory. 
This returned a server error. So the render function is choking on getting the html page.
Changed return statement for all_projects view function to: 
    return render(request, 'hubapp/all_projects.html')
commented out whole of all_projects html page, turned it into a single header. 
So the next task is to load an html page from that function. 
Got page view as simple string return directly from the all_projects function.
Commented out projects load from database in same view function. 
Changed httpresponse object for all_projects view funtion to a string. 

Ran $ $ python3 manage.py migrate --fake hubapp
db already exists error
Ran $ python3 manage.py migrate hubapp
Runserver error: migrations not applied
Nuked WSGI_APPLICATION variable in debugsettings and the server connected
WSGI error
Ran manage.py runserver --settings=config.debugsettings
Created a debugsettings.py file in config directory

Altered views to have holding pages for Lucky Egg and Idletwilight. 
Commented out 'idletwilight' path and link from base.html navbar section
Updated hubapp.base.html reflections paths to idletwilight. 
Error: no reverse math, 'reflections' is not a registered namespace.

Updated hubapp.base.html from 'projects' namespaces to 'hubapp'
Error: no reverse match, 'projects' is not a registered namespace.

hubbap.views.py: Substituted 'hubbapp' for 'projects' in render template argument for all_projects and project_detail page views: ie changed 'projects/all_projects.html' and 'projects/details.html'
Changed db table name to hubapp_hubapp from hubapp in PhPMyAdmin
Test: 500Server error, db name hubapp_hubapp doesn't exist
Changed db name in basesettings from charlieawbery to charlie_charlieawbery
Test: 500Server error, database access denied.
Feb 18th 2020:

Tested page view, got a server error(500) for the empty string frontpage and a Page not found error for the /projects page. 
Reset Apache. 
Made migrations to new hubapp table in MySQL db on server from ssh shell. 
Troubleshot a couple of typos running Python. 

Added main.css file to Hubapp static files. Copied folder hierarchy from projects app

Wrote urls.py for hubapp. Imported all views, kept notes in the file about what I added and changed. The empty string was previously set to a toy test frontpage view, which I have commented out for now. 

Added Hubapp model to admin.py file in charlieawbery/hubapp, registering Hubapp to Django Admin dashboard. 

Added models.py file to charlieawbery/hubapp: created Hubapp model to match Hubapp table in charlieawbery database. 


Added views.py file to charlieawbery/hubapp in cPanel files: I am keeping the url for the hubapp to be 'projects'. The model is Hubapp. 
Changed 'reflections' project to 'idletwilight' in the hubapp database.
Added Hubapp database to charlieawbery via PHPMyAdmin, copied projects data to it. 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
tested page view, it worked bitches. 

Made path relative, changed it from charlieawbery.config.productionsettings to config.productionsetttings
tested page view, same error message. 
Reset
Changed path in passenger_wsgi from charlieawbery.settings to charlieawbery.config.productionsettings:
environ=os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'charlieawbery.config.productionsettings')

tested page view: 
    importlib.import_module(self.SETTINGS_MODULE)
    ModuleNotFoundError: No module named 'charlieawbery'
    
Removed dot from before wsgi import
tested page view, apache error log: 'from .wsgi import app' import error

Updated passenger_wsgi.py with a forced path switch from Python2 to Python3

Tested page view, same passenger error page. 
Restarted Apache.
Fixed a stupid typo in passenger_wsgi.py

changed the WSGI_APPLICATION variable to charlieawbery.wsgi.application just in order to keep it as the default while testing other things. 

Tested page view, got the passenger error page. 

Registered new app, charlieawbery.

Unregistered previous Django app from CPanel so that there's no path conflict between apps. 
!!!
Changed wsgi path in basesettings from config.wsgi.application to charlieawbery.passenger_wsgi.application because wsgi application variable is now set in passenger file. 
 - Is this variable in settings even needed now? 
 - If it is, does the path string access it, because it's referring to a folder one level above itself. If url doesn't work, it may be worth coming back to this set up and the file hierarchy and getting a better understanding of what this variable is doing. 
!!!

Pip installed Django and mysqlclient into charlieawbery virtual environment on the server. 
Transferred data via a SQL dump through the CPanel PHPMyAdmin interface into charlieawbery db on the server. At the moment there is only django admin data in there, no personal files. 
Added new database to MySQL databases in cPanel. My username charlie_charlie, new database charlie_charlieawbery. 

Feb 17th 2020:

git pull
Created virtual environment inside charlieawbery directory. 
Generated ssh key and cloned github repo to a new directory in cPanel files, charlieawbery. 

From here up, production activity is separate from dev activity. Changes to this file are common to github repo and cPanel activity log but are not recorded in the local development environment. 

git commit: "separated secret keys from settings, assigned new key to devsettings"
Tested production settings in runserver
Tested development settings in runserver
Generated a new secret key, assigned it to SECRET_KEY variable in devsettings
Wrote get_secret function with .json open for productionsettings
Imported json into productionsettings
Added a secrets.json file to charlieawbery_root directory, commented out secret key variable in basesettings file.
In .gitignore, changed devsettings directory to config/devsettings.py

Created templates directory in root directory, added 404.html file for production purposes. Django renders this when debug is false. Didn't connect it to response path yet. 
Added TEMPLATE_DEBUG = False variable to productionsettings.py
git commit: "productionsettings file added to config directory"
Added DEBUG, DATABASE and ALLOWED_HOSTS variables
Created a productionsettings file in config directory.

git commit: "settings directory refactored to basesettings with devsettings child file, settings_notes added to config directory"
Created settings_notes.txt file in config directory. 
Used runserver with settings variable to check homepage view: python manage.py runserver --settings=config.devsettings
Moved DEBUG variable from basesettings.py to devsettings.py
Added devsettings.py child file to basesettings. Moved DATABASE variable to devsettings file. 

Checked runserver still worked
Updated manage.py with path to basesettings 
Changed settings.py name to basesettings.py

git commit: "manual change back to previous development configuration, nuked all production config"
git commit: "added changes to .gitignore, readme and activity_log"
Tested runserver for homepage view. 

Made manual changes back to old version:
 - nuked productionconfig directory
 - changed names in wsgi, settings and manage.py back to config from devconfig
 - changed directory name back to config from devconfig

Got really annoyed with trying to find how to bring up an old git version in my IDE window and gave up for now. I think it's probably done using a hard reset but by the time I could do that, I'd already nuked my recent commits and didn't want to reset to an older version. 

Added: 
[alias]
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
to git config file in charlieawbery home directory, so that I could view git history in bash. Also added it to Django_portfolio git config on Mac.  

Did $ git reset HEAD~2  
I thought this would change my cd back to a previous state but it didn't.  

Read Two Scoops chapter 5 on using multiple settings file and decided to change the hierarchy again, to avoid bug creation problems in separate dev and production directories. 

git commit: "production and dev config folders separated. devconfig removed from version control"
Tested runserver for homepage view. 
Renamed config copy to productionconfig. 
Updated manage.py with devconfig name.
Copied config folder. Renamed config folder to devconfig and updated name in settings and wsgi files. 

Feb 16th 2020:

git commits: "created homepage view for hubapp, configured urls" and "urls.py added for hubapp"

Checked server connection for new homepage view. 
Added url dispatcher for hubapp (empty string) to urls.py in config app
Created urls.py in hubapp and configured frontpage url path
Created a hubbapp.views.py frontpage view function 
git commit: "updated settings with additional apps, hubapp and charlieawbery_root"
Checked server connection with runserver
Added to settings:
    # Additional apps
    'hubapp.apps.HubappConfig',
    'charlieawbery_root.apps.Charlieawbery_rootConfig',

Updated app name to new charlieawbery_root in apps.py (charlieawbery_root directory)
git commit: "added new app, hubapp"
Created hubapp for landing page and top level coordination of all my sites
git commit "renamed management package to charlieawbery_root, imported mysqlclient, configured db"
Renamed management package to charlieawbery_root
Settings.py: ROOT_URLconf, set to 'config.urls', WSGI_APPLICATION set to config.wsgi.application
Changed development environment database settings in settings.py for MySQL database (name of new db is charlieawbery)
pip imported mysqlclient and updated rqrments.txt
git commit: "Django installed, requirements text updated"
updated requirements text with pip freeze
installed Django version 3.0.3

Feb 15th 2020:
Added .vscode folder to .gitignore

In management app, the apps.py file had automatically configured a class called portfolioconfig, with name portfolio. This was because I named the original command line app setup 'portfolio.' I later changed it to 'management'. So I rewrote the apps.py file: changed the class name to managementconfig and named it management. 

Committed charlieawbery directory to new git repo ("first commit charlieawbery")

Added following to .gitignore:
env
*.DS_Store
*.pyc
__pycache__

.venv

Set up .venv folder for all venvs inside top level
Made first level config directory for init, settings, urls and wsgi
Created gitignore, readme and requirements.txt files in root directory
Moved manage.py doc to top level charlieawbery repository root
Moved directory contents and files to create desired project hierarchy
Created charlieawbery repository root directory for new django template. 
